=== Replay Demo: exp_to_acos ===
Prompt file: /home/ubuntu/replay/examples/prompts/create_new_op_from_generic.txt
Project name: exp_to_acos
Output directory: /home/ubuntu/replay/examples/demos

Starting replay execution...
Command: python replay.py "/home/ubuntu/replay/examples/prompts/create_new_op_from_generic.txt" "exp_to_acos" --output_dir "/home/ubuntu/replay/examples/demos"



BUILDING INITIAL GRAPH FROM INPUT FILE


PASS: Build Epic Graph:

template_1 = Opcode.TEMPLATE() {{'path': 'templates/ttnn/newop_generic'}}
docs_2 = Opcode.DOCS(template_1) {{'path': 'docs'}}
prompt_3 = Opcode.PROMPT(docs_2) {{'prompt': 'Update @code:tt_eltwise_sfpu.cpp to implement acos operation instead of exp Update @code:test_newop.py to compare against ttnn.acos instead of exp ``` #### acos_tile void ckernel::acos_tile_init() Most compute API calls have an *_init paired API call (for example exp_tile_init and exp_tile). Invoking this *_init API configures the compute unit for execution of the subsequent paired call. void ckernel::acos_tile(uint32_t idst) Performs element-wise computation of arccossine on each element of a tile in DST register at index tile_index. The DST register buffer must be in acquired state via _acquire_dst_ call. This call is blocking and is only available on the compute engine. Return value: None Argument | Description | Type | Valid Range | Required ---|---|---|---|--- idst | The index of the tile in DST register buffer to perform the computation on | uint32_t | Must be less than the size of the DST register buffer | True ``` To use acos_tile you need compute_kernel_api.h include'}}



PASS: insert_exit_node
Description: Add EXIT node at the end if not already present.


PASS: Insert Exit Node


Node list:
['template_1', 'docs_2', 'prompt_3']

template_1 = Opcode.TEMPLATE() {{'path': 'templates/ttnn/newop_generic'}}
docs_2 = Opcode.DOCS(template_1) {{'path': 'docs'}}
prompt_3 = Opcode.PROMPT(docs_2) {{'prompt': 'Update @code:tt_eltwise_sfpu.cpp to implement acos operation instead of exp Update @code:test_newop.py to compare against ttnn.acos instead of exp ``` #### acos_tile void ckernel::acos_tile_init() Most compute API calls have an *_init paired API call (for example exp_tile_init and exp_tile). Invoking this *_init API configures the compute unit for execution of the subsequent paired call. void ckernel::acos_tile(uint32_t idst) Performs element-wise computation of arccossine on each element of a tile in DST register at index tile_index. The DST register buffer must be in acquired state via _acquire_dst_ call. This call is blocking and is only available on the compute engine. Return value: None Argument | Description | Type | Valid Range | Required ---|---|---|---|--- idst | The index of the tile in DST register buffer to perform the computation on | uint32_t | Must be less than the size of the DST register buffer | True ``` To use acos_tile you need compute_kernel_api.h include'}}
exit_node_4 = Opcode.EXIT(prompt_3) {{}}



PASS: lower_debug_loop
Description: Transform DEBUG_LOOP nodes into conditional loops with run nodes.


PASS: Lower Debug Loop
No DEBUG_LOOP node found

template_1 = Opcode.TEMPLATE() {{'path': 'templates/ttnn/newop_generic'}}
docs_2 = Opcode.DOCS(template_1) {{'path': 'docs'}}
prompt_3 = Opcode.PROMPT(docs_2) {{'prompt': 'Update @code:tt_eltwise_sfpu.cpp to implement acos operation instead of exp Update @code:test_newop.py to compare against ttnn.acos instead of exp ``` #### acos_tile void ckernel::acos_tile_init() Most compute API calls have an *_init paired API call (for example exp_tile_init and exp_tile). Invoking this *_init API configures the compute unit for execution of the subsequent paired call. void ckernel::acos_tile(uint32_t idst) Performs element-wise computation of arccossine on each element of a tile in DST register at index tile_index. The DST register buffer must be in acquired state via _acquire_dst_ call. This call is blocking and is only available on the compute engine. Return value: None Argument | Description | Type | Valid Range | Required ---|---|---|---|--- idst | The index of the tile in DST register buffer to perform the computation on | uint32_t | Must be less than the size of the DST register buffer | True ``` To use acos_tile you need compute_kernel_api.h include'}}
exit_node_4 = Opcode.EXIT(prompt_3) {{}}



PASS: lower_prompt_file_refs
Description: Extract @docs:, @template:, and @code: references from prompt text.


PASS: Lower Prompt File References
Added code_refs to prompt_3: ['tt_eltwise_sfpu.cpp', 'test_newop.py']

template_1 = Opcode.TEMPLATE() {{'path': 'templates/ttnn/newop_generic'}}
docs_2 = Opcode.DOCS(template_1) {{'path': 'docs'}}
prompt_3 = Opcode.PROMPT(docs_2) {{'prompt': 'Update @code:tt_eltwise_sfpu.cpp to implement acos operation instead of exp Update @code:test_newop.py to compare against ttnn.acos instead of exp ``` #### acos_tile void ckernel::acos_tile_init() Most compute API calls have an *_init paired API call (for example exp_tile_init and exp_tile). Invoking this *_init API configures the compute unit for execution of the subsequent paired call. void ckernel::acos_tile(uint32_t idst) Performs element-wise computation of arccossine on each element of a tile in DST register at index tile_index. The DST register buffer must be in acquired state via _acquire_dst_ call. This call is blocking and is only available on the compute engine. Return value: None Argument | Description | Type | Valid Range | Required ---|---|---|---|--- idst | The index of the tile in DST register buffer to perform the computation on | uint32_t | Must be less than the size of the DST register buffer | True ``` To use acos_tile you need compute_kernel_api.h include', 'docs_refs': [], 'template_refs': [], 'code_refs': ['tt_eltwise_sfpu.cpp', 'test_newop.py']}}
exit_node_4 = Opcode.EXIT(prompt_3) {{}}



PASS: process_ro_markers
Description: Create READ_ONLY nodes from /RO markers in prompt text.


PASS: Process RO Markers

template_1 = Opcode.TEMPLATE() {{'path': 'templates/ttnn/newop_generic'}}
docs_2 = Opcode.DOCS(template_1) {{'path': 'docs'}}
prompt_3 = Opcode.PROMPT(docs_2) {{'prompt': 'Update @code:tt_eltwise_sfpu.cpp to implement acos operation instead of exp Update @code:test_newop.py to compare against ttnn.acos instead of exp ``` #### acos_tile void ckernel::acos_tile_init() Most compute API calls have an *_init paired API call (for example exp_tile_init and exp_tile). Invoking this *_init API configures the compute unit for execution of the subsequent paired call. void ckernel::acos_tile(uint32_t idst) Performs element-wise computation of arccossine on each element of a tile in DST register at index tile_index. The DST register buffer must be in acquired state via _acquire_dst_ call. This call is blocking and is only available on the compute engine. Return value: None Argument | Description | Type | Valid Range | Required ---|---|---|---|--- idst | The index of the tile in DST register buffer to perform the computation on | uint32_t | Must be less than the size of the DST register buffer | True ``` To use acos_tile you need compute_kernel_api.h include', 'docs_refs': [], 'template_refs': [], 'code_refs': ['tt_eltwise_sfpu.cpp', 'test_newop.py']}}
exit_node_4 = Opcode.EXIT(prompt_3) {{}}


template_1 = Opcode.TEMPLATE() {{'path': 'templates/ttnn/newop_generic'}}
docs_2 = Opcode.DOCS(template_1) {{'path': 'docs'}}
prompt_3 = Opcode.PROMPT(docs_2) {{'prompt': 'Update @code:tt_eltwise_sfpu.cpp to implement acos operation instead of exp Update @code:test_newop.py to compare against ttnn.acos instead of exp ``` #### acos_tile void ckernel::acos_tile_init() Most compute API calls have an *_init paired API call (for example exp_tile_init and exp_tile). Invoking this *_init API configures the compute unit for execution of the subsequent paired call. void ckernel::acos_tile(uint32_t idst) Performs element-wise computation of arccossine on each element of a tile in DST register at index tile_index. The DST register buffer must be in acquired state via _acquire_dst_ call. This call is blocking and is only available on the compute engine. Return value: None Argument | Description | Type | Valid Range | Required ---|---|---|---|--- idst | The index of the tile in DST register buffer to perform the computation on | uint32_t | Must be less than the size of the DST register buffer | True ``` To use acos_tile you need compute_kernel_api.h include', 'docs_refs': [], 'template_refs': [], 'code_refs': ['tt_eltwise_sfpu.cpp', 'test_newop.py']}}
exit_node_4 = Opcode.EXIT(prompt_3) {{}}


=== Parsed Graph Nodes ===
('template_1', {'opcode': <Opcode.TEMPLATE: 'TEMPLATE'>, 'contents': {'path': 'templates/ttnn/newop_generic'}})
('docs_2', {'opcode': <Opcode.DOCS: 'DOCS'>, 'contents': {'path': 'docs'}})
('prompt_3', {'opcode': <Opcode.PROMPT: 'PROMPT'>, 'contents': {'prompt': 'Update @code:tt_eltwise_sfpu.cpp to implement acos operation instead of exp Update @code:test_newop.py to compare against ttnn.acos instead of exp ``` #### acos_tile void ckernel::acos_tile_init() Most compute API calls have an *_init paired API call (for example exp_tile_init and exp_tile). Invoking this *_init API configures the compute unit for execution of the subsequent paired call. void ckernel::acos_tile(uint32_t idst) Performs element-wise computation of arccossine on each element of a tile in DST register at index tile_index. The DST register buffer must be in acquired state via _acquire_dst_ call. This call is blocking and is only available on the compute engine. Return value: None Argument | Description | Type | Valid Range | Required ---|---|---|---|--- idst | The index of the tile in DST register buffer to perform the computation on | uint32_t | Must be less than the size of the DST register buffer | True ``` To use acos_tile you need compute_kernel_api.h include', 'docs_refs': [], 'template_refs': [], 'code_refs': ['tt_eltwise_sfpu.cpp', 'test_newop.py']}})
('exit_node_4', {'opcode': <Opcode.EXIT: 'EXIT'>, 'contents': {}})
=== End Parsed Graph Nodes ===



Dir post processing:

=== Demo completed ===
Check the output in: /home/ubuntu/replay/examples/demos/exp_to_acos
