/TEMPLATE templates/ttnn/newop_generic
/DOCS docs/

/PROMPT 
We are creating a compute kernel for COSH function.
* Think how to lower COSH into a set of more primitive operations 
* Think step by step, how many intermediate variables must be kept at any time?
Write the chain as a test into a new file called "test_lowered_cosh.py", compare to torch
Each line should be no more than 1 primitive operation

<lowering>
atanh(x)

a = 1 + x     # 1 temp
b = 1 - x     # 2 temp
c = b / x     # 1 temp
d = log(c)    # 1 temp
return d / 2

</lowering>

/DEBUG_LOOP @command:"python3 test_lowered_cosh.py"

/PROMPT
Update @code:test_newop.py to compare against torch COSH
Reference the lowering from @code:test_lowered_cosh.py to see what operations to combine in @code:tt_eltwise_sfpu.cpp as LLK calls
@docs:kernel_api_compute_operations.md
@docs:kernel_api_circular_buffers.md
@docs:example_compute_llk_where.cpp

Make sure to declare any additional CBs you need in @code:test_newop.py prepare_newop_program function - this makes sure you can access them inside kernel @code:tt_eltwise_sfpu.cpp

/DEBUG_LOOP @command:"python3 test_newop.py"